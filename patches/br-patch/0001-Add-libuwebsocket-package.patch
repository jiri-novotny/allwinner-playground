diff --git a/package/Config.in b/package/Config.in
index 9ed296f..6d96ec6 100644
--- a/package/Config.in
+++ b/package/Config.in
@@ -1236,6 +1236,7 @@ menu "Networking"
 	source "package/libupnp/Config.in"
 	source "package/libupnpp/Config.in"
 	source "package/liburiparser/Config.in"
+	source "package/libuwebsockets/Config.in"
 	source "package/libvncserver/Config.in"
 	source "package/libwebsock/Config.in"
 	source "package/libwebsockets/Config.in"
diff --git a/package/libuwebsockets/0001-Fix-install-path.patch b/package/libuwebsockets/0001-Fix-install-path.patch
new file mode 100644
index 0000000..cc1f27f
--- /dev/null
+++ b/package/libuwebsockets/0001-Fix-install-path.patch
@@ -0,0 +1,13 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 1fadf72..acace68 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -34,7 +34,7 @@ target_link_libraries (uWS LINK_PUBLIC ${ZLIB_LIBRARY})
+ 
+ if (UNIX)
+ target_link_libraries (uWS LINK_PUBLIC pthread)
+-install (TARGETS uWS DESTINATION /usr/lib64)
++install (TARGETS uWS DESTINATION /usr/lib)
+ install (FILES src/Extensions.h src/WebSocketProtocol.h src/Networking.h src/WebSocket.h src/Hub.h src/Group.h src/Node.h src/Socket.h src/HTTPSocket.h src/uWS.h DESTINATION /usr/include/uWS)
+ endif (UNIX)
+ 
diff --git a/package/libuwebsockets/0002-Add-my-example.patch b/package/libuwebsockets/0002-Add-my-example.patch
new file mode 100644
index 0000000..f79dbaf
--- /dev/null
+++ b/package/libuwebsockets/0002-Add-my-example.patch
@@ -0,0 +1,85 @@
+diff --git a/examples/echo.cpp b/examples/echo.cpp
+index 73ce9d0..e9f9426 100644
+--- a/examples/echo.cpp
++++ b/examples/echo.cpp
+@@ -1,13 +1,74 @@
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++#include <unistd.h>
+ #include <uWS.h>
+ 
++char radio[16];
++char state = 0;
++char volume = 19;
++
++void parseResp(uWS::WebSocket<uWS::SERVER> ws, char *message, uWS::OpCode opCode)
++{
++  static char resp[256];
++
++  if (strncmp(message, "init", 4) == 0)
++  {
++    sprintf(resp, "vol=%d;bedstate=%s;radio=%s;", volume, state ? "ON" : "OFF", radio);
++  }
++  else if (strncmp(message, "bedstate", 8) == 0)
++  {
++    if (state == 0)
++    {
++      state = 1;
++      strcpy(resp, "bedstate=ON;");
++      system("/usr/bin/rfmctrl 192.168.0.10 9000 T1");
++    }
++    else
++    {
++      state = 0;
++      strcpy(resp, "bedstate=OFF;");
++      system("/usr/bin/rfmctrl 192.168.0.10 9000 T1");
++    }
++  }
++  else if (strncmp(message, "volup", 5) == 0)
++  {
++    if (volume < 59) volume += 4;
++    else volume = 63;
++    system("amixer sset 'Power Amplifier',0 2+");
++    sprintf(resp, "vol=%d", volume);
++  }
++  else if (strncmp(message, "voldn", 5) == 0)
++  {
++    if (volume > 4) volume -= 4;
++    else volume = 0;
++    system("amixer sset 'Power Amplifier',0 2-");
++    sprintf(resp, "vol=%d", volume);
++  }
++  else if (strncmp(message, "radio", 5) == 0)
++  {
++    strncpy(radio, message + 6, 4);
++    radio[5] = 0;
++    sprintf(resp, "/usr/bin/radio %s", radio);
++    system(resp);
++    sprintf(resp, "radio=%s", radio);
++  }
++  ws.send(resp, strlen(resp), opCode);
++}
++
+ int main()
+ {
+-    uWS::Hub h;
++  uWS::Hub h;
++
++  strcpy(radio, "none");
+ 
+-    h.onMessage([](uWS::WebSocket<uWS::SERVER> ws, char *message, size_t length, uWS::OpCode opCode) {
+-        ws.send(message, length, opCode);
+-    });
++  h.onMessage([](uWS::WebSocket<uWS::SERVER> ws, char *message, size_t length, uWS::OpCode opCode) {
++    printf("message in: %s\n", message);
++    message[length] = 0;
++    printf("message in: %s\n", message);
++    parseResp(ws, message, opCode);
++  });
+ 
+-    h.listen(3000);
+-    h.run();
++  h.listen(3000);
++  h.run();
+ }
diff --git a/package/libuwebsockets/Config.in b/package/libuwebsockets/Config.in
new file mode 100644
index 0000000..a70dc3e
--- /dev/null
+++ b/package/libuwebsockets/Config.in
@@ -0,0 +1,20 @@
+config BR2_PACKAGE_LIBUWEBSOCKETS
+	bool "libuwebsockets"
+  select BR2_PACKAGE_LIBUV
+  select BR2_PACKAGE_OPENSSL
+  select BR2_PACKAGE_ZLIB
+	depends on BR2_TOOLCHAIN_HAS_THREADS
+	help
+	  Fast and lightweight library for WebSockets
+
+if BR2_PACKAGE_LIBUWEBSOCKETS
+
+config BR2_PACKAGE_LIBUWEBSOCKETS_EXAMPLES
+	bool "Install examples"
+	help
+	  Install examples to target.
+
+endif
+
+comment "libuwebsockets needs a toolchain w/ threads"
+	depends on !BR2_TOOLCHAIN_HAS_THREADS
diff --git a/package/libuwebsockets/libuwebsockets.hash b/package/libuwebsockets/libuwebsockets.hash
new file mode 100644
index 0000000..507f842
--- /dev/null
+++ b/package/libuwebsockets/libuwebsockets.hash
@@ -0,0 +1,2 @@
+# Locally computed:
+sha256  6ebf4bd2ef74292fd9fe74af9739b224e38733b89bdefa5a81170c000b833a7d  v0.11.0.tar.gz
diff --git a/package/libuwebsockets/libuwebsockets.mk b/package/libuwebsockets/libuwebsockets.mk
new file mode 100644
index 0000000..0d7dfe7
--- /dev/null
+++ b/package/libuwebsockets/libuwebsockets.mk
@@ -0,0 +1,24 @@
+################################################################################
+#
+# libuwebsockets
+#
+################################################################################
+
+LIBUWEBSOCKETS_VERSION = 0.11.0
+LIBUWEBSOCKETS_SOURCE = v$(LIBUWEBSOCKETS_VERSION).tar.gz
+LIBUWEBSOCKETS_SITE = https://github.com/uWebSockets/uWebSockets/archive
+LIBUWEBSOCKETS_INSTALL_STAGING = YES
+LIBUWEBSOCKETS_DEPENDENCIES = libuv openssl zlib
+
+ifeq ($(BR2_PACKAGE_LIBUWEBSOCKETS_EXAMPLES),y)
+define LIBUWEBSOCKETS_INSTALL_TARGET_CMDS
+	cp -dpf $(STAGING_DIR)/usr/lib/libuWS.so $(TARGET_DIR)/usr/lib
+	$(INSTALL) -D -m 0755 $(@D)/examples/echo $(TARGET_DIR)/usr/sbin/websocketserver
+endef
+else
+define LIBUWEBSOCKETS_INSTALL_TARGET_CMDS
+	cp -dpf $(STAGING_DIR)/usr/lib/libuWS.so $(TARGET_DIR)/usr/lib
+endef
+endif
+
+$(eval $(cmake-package))
