diff --git a/examples/echo.cpp b/examples/echo.cpp
index 73ce9d0..e9f9426 100644
--- a/examples/echo.cpp
+++ b/examples/echo.cpp
@@ -1,13 +1,74 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
 #include <uWS.h>
 
+char radio[16];
+char state = 0;
+char volume = 19;
+
+void parseResp(uWS::WebSocket<uWS::SERVER> ws, char *message, uWS::OpCode opCode)
+{
+  static char resp[256];
+
+  if (strncmp(message, "init", 4) == 0)
+  {
+    sprintf(resp, "vol=%d;bedstate=%s;radio=%s;", volume, state ? "ON" : "OFF", radio);
+  }
+  else if (strncmp(message, "bedstate", 8) == 0)
+  {
+    if (state == 0)
+    {
+      state = 1;
+      strcpy(resp, "bedstate=ON;");
+      system("/usr/bin/rfmctrl 192.168.0.10 9000 T1");
+    }
+    else
+    {
+      state = 0;
+      strcpy(resp, "bedstate=OFF;");
+      system("/usr/bin/rfmctrl 192.168.0.10 9000 T1");
+    }
+  }
+  else if (strncmp(message, "volup", 5) == 0)
+  {
+    if (volume < 59) volume += 4;
+    else volume = 63;
+    system("amixer sset 'Power Amplifier',0 2+");
+    sprintf(resp, "vol=%d", volume);
+  }
+  else if (strncmp(message, "voldn", 5) == 0)
+  {
+    if (volume > 4) volume -= 4;
+    else volume = 0;
+    system("amixer sset 'Power Amplifier',0 2-");
+    sprintf(resp, "vol=%d", volume);
+  }
+  else if (strncmp(message, "radio", 5) == 0)
+  {
+    strncpy(radio, message + 6, 4);
+    radio[5] = 0;
+    sprintf(resp, "/usr/bin/radio %s", radio);
+    system(resp);
+    sprintf(resp, "radio=%s", radio);
+  }
+  ws.send(resp, strlen(resp), opCode);
+}
+
 int main()
 {
-    uWS::Hub h;
+  uWS::Hub h;
+
+  strcpy(radio, "none");
 
-    h.onMessage([](uWS::WebSocket<uWS::SERVER> ws, char *message, size_t length, uWS::OpCode opCode) {
-        ws.send(message, length, opCode);
-    });
+  h.onMessage([](uWS::WebSocket<uWS::SERVER> ws, char *message, size_t length, uWS::OpCode opCode) {
+    printf("message in: %s\n", message);
+    message[length] = 0;
+    printf("message in: %s\n", message);
+    parseResp(ws, message, opCode);
+  });
 
-    h.listen(3000);
-    h.run();
+  h.listen(3000);
+  h.run();
 }
